// <auto-generated />
using System;
using Acme.Ports.Manager.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Acme.Ports.Manager.Infrastructure.Data.Migrations
{
    [DbContext(typeof(PortsManagerContext))]
    partial class PortsManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Acme.Ports.Manager.Core.Models.Port", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("Acme.Ports.Manager.Core.Models.Ship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("CurrentPortId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("PortId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPortId");

                    b.HasIndex("PortId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("Acme.Ports.Manager.Core.Models.Ship", b =>
                {
                    b.HasOne("Acme.Ports.Manager.Core.Models.Port", "CurrentPort")
                        .WithMany()
                        .HasForeignKey("CurrentPortId");

                    b.HasOne("Acme.Ports.Manager.Core.Models.Port", null)
                        .WithMany("DockedShips")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrentPort");
                });

            modelBuilder.Entity("Acme.Ports.Manager.Core.Models.Port", b =>
                {
                    b.Navigation("DockedShips");
                });
#pragma warning restore 612, 618
        }
    }
}
